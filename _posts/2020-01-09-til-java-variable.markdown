---
layout: post
title: "[TIL/JAVA] 변수와 입출력"
date: 2020-01-09 19:20:23 +0900
category: Java
comments: true
---

## 1. 변수
### 변수
* 단 하나의 값을 저장할 수 있는 메모리 공간

### 변수의 선언
```java
int x;      // x라는 이름의 정수형 변수 선언
변수타입 변수이름;
```
* 변수타입 : 변수에 저장될 값이 어떤 타입인지 지정하는 것
* 변수이름 : 메모리 공간에 붙인 이름

### 변수의 초기화 (Initialization)
```java
int x = 1;  // 변수 x를 선언하고 1로 초기화
```
* 변수를 사용하기 전에 처음으로 값을 저장하는 것
  * 메모리는 여러 프로그램이 공유하는 자원이므로 전에 다른 프로그램에 의해 저장된 '알 수 없는 값'이 남아있을 수 있기 때문에 필요하다.
  * 변수의 종류에 따라 생략할 수 있지만, 사용되기 전 초기화 하는 것이 좋다.
* 대입 연산자 '=' 이용

### 변수의 명명규칙
* 식별자 : 프로그램에서 사용하는 모든 이름
  * 같은 영역 내에서 서로 식별될 수 있어야 한다.
```
1. 대소문자가 구분된다.
2. 길이에 제한이 없다.
3. 예약어를 사용해서는 안된다.
4. 숫자로 시작해서는 안된다.
5. 특수문자는 '_'와 '$'만 허용된다.
```
* 예약어 : 프로그래밍언어의 구문에 사용되는 단어
  * 예 : int, double, if, while 등

##2. 변수의 타입

### 값의 종류
![data_type](/assets/images/data_type.JPG)
* 자료형 : 값의 종류에 따라 값이 저장될 공간의 크기와 저장형식을 정의한 것
* 기본형과 참조형
  * 기본형 변수 : 실제값 저장 (논리형, 문자형, 정수형, 실수형)
  * 참조형 변수 : 주소값 저장 (클래스이름을 타입으로 사용)
  
* 참조변수 선언
```
클래스이름 변수이름;
```
* 참조변수 선언 및 초기화
```
Date today = new Date();    // Date객체를 생성하여, 그 주소를 today변수에 저장
클래스이름 변수이름 = new 클래스이름();
```

### 기본형

|종류|1byte|2byte|4byte|8byte|
|:-----|:-----:|:-----:|:-----:|:-----:|
|논리형|boolean| | | |
|문자형| |char| | |
|정수형|byte|short|int|long|
|실수형| | |float|double|

* boolean을 제외한 나머지 7개의 기본형은 서로 연산과 변환이 가능하다.
* 정수형의 값의 범위
  * int형 변수는 대략 10자리 수(약 20억)의 값을 저장할 수 있다.
* 실수형의 정밀도
  * 정밀도가 높을수록 발생할 수 있는 오차의 범위가 줄어든다.
  * 10진수로 float은 7자리, double은 15자리 수를 오차없이 저장할 수 있다.

### 상수와 리터럴
* 상수 : 한번 값을 저장하면 다른 값으로 변경할 수 없다.
  * 키워드 'final'
  * 코드의 이해와 수정을 쉽게 만든다.
```java
final int MAX = 10;
```

* 리터럴 : 그 자체로 값을 의미
  * 8진수, 16진수, 2진수 표현 (접두어)
    * 8진수 : 0
    * 16진수 : 0x
    * 2진수 : 0b
  * 정수형, 실수형 표현 (접미사)
    * 정수형 : l(L)
    * 실수형 : f(F), d(D)
    * long, float에 값을 저장할 때 접미사 생략 불가  

```
int num = 010;      // 8진수 10, 10진수 8
long big = 100_000_000_000L;
float pi = 3.14f;
float pi = 3.14;    // 에러
```

### 타입 불일치
타입이 달라도 저장범위가 넓은 타입에 좁은 타입의 값을 저장하는 것은 허용된다.

### 문자 리터럴과 문자열 리터럴
* 문자 리터럴 : 작은따옴표로 문자 하나를 감싼 것 ('' 안에 하나의 문자가 있어야 함)
* 문자열 리터럴 : 큰따옴표로 두 문자 이상을 감싼 것 (""안에 아무 문자도 없는 것 허용)
  * 덧셈 연산자를 이용하여 문자열 결합 가능
  
## 3. 입출력
### 출력
* println()
  * 변수의 값을 그대로 출력
  * 출력 후 줄바꿈
* printf()
  * '지시자(specifier)'를 통해 변수의 값을 여러 가지 형식으로 변환하여 출력
  * 출력 후 줄바꿈을 하지 않음 (지시자 '%n' 사용)
* 지시자(specifier)

|지시자|출력 형식|
|:-----:|:-----:|
|%b|불리언|  
|%d|10진 정수|
|%o|8진 정수|
|%x|16진 정수|
|%f|부동 소수점|
|%e|지수 표현식|
|%c|문자|
|%s|문자열|

```java
System.out.printf("age:%d%n", age); // age의 값 출력 후 줄바꿈
```
  * 지시자 옵션
  
  |옵션|의미|
  |:---:|:---:|
  |-|항목이 필드의 왼쪽부터 시작하여 프린트 된다|
  |0|여분 공간을 0으로 채운다|
  |#|접두사 '0x'와 '0'을 붙여 출력한다|
  |10진수|최소 출력공간 확보(크기에 맞지 않으면 크기 무시|
  |.10진수|소수점 아래 자리수, 출력될 최대 문자 개수, 출력될 수의 최대 문자 개수|
  
```java
System.out.printf("[%5d]%n", tem);    // [   10]
System.out.printf("[-%5d]%n", tem);   // [10   ]
System.out.printf("[%05d]%n", tem);   // [00010]
System.out.printf("%#x%n", hex);      // 0xffff
System.out.printf("[%f]%n", num);       // [1.23456789]
System.out.printf("[%14.10f]%n", num);  // [  1.2345678900]
```
  
### 입력
* Scanner 클래스 이용
```java
import java.util.*;                         // Scanner 클래스를 사용하기 위해 추가
Scanner scanner = new Scanner (System.in);  // Scanner 클래스의 객체 생성
String input = scanner.nextLine();          // 입력받은 내용을 input에 저장 (문자열로 저장)
int num = Integer.parseInt(input);          // input(문자열)을 숫자로 변환하여 num에 저장
int num2 = scanner.nextInt();               // 입력받은 내용을 num에 저장 (정수로 저장)
```
