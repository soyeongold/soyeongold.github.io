---
layout: post
title: "[TIL/Javascript] 자바스크립트의 논리연산자와 '??'연산자"
date: 2020-02-02 23:52:23 +0900
category: Javascript
comments: true
---

## 논리연산자

### || (OR)

* 인수 중 하나라도 `true`이면 `true`를 반환하고, 그렇지 않으면 `false`를 반환한다.
* 피연산자가 불린형이 아니면, 평가를 위해 불린형으로 변환된다.
* OR 연산자와 피연산자가 여러 개인 경우 동작 방식
  1. 가장 왼쪽 피연산자부터 시작해 오른쪽으로 나아가며 피연산자를 평가한다.
  2. 각 피연산자를 불린형으로 변환한다. 변환 후 그 값이 `true`이면 연산을 멈추고 해당 피연산자의 *변환 전 원래 값*을 반환한다. 
  3. 피연산자를 모두 평가한 경우 (모든 피연산자가 `false`인 경우) 마지막 피연산자를 반환한다.

```javascript
alert(undefined || null  0);// 0 (모두 falsy이므로, 마지막 값을 반환)
```

#### OR 연산자 활용
1. 변수 또는 표현식으로 구성된 목록에서 첫 번째 truthy 얻기
  * 변수들 중에 값이 들어있는 변수를 찾아서 보여줄 수 있다.
2. 단락 평가
  * 왼쪽부터 평가하며 truthy를 만나면 나머지 값들은 건드리지 않고 평가를 멈추는 프로세스이다.
  ```javascript
  true || alert("not printed");// alert 실행되지 않음
  false || alert("printed");// alert 실행됨
  ```


## && (AND)

* 인수 중 하나라도 `false`이면 `false`를 반환하고, 그렇지 않으면 `true`를 반환한다.
* AND 연산자와 피연산자가 여러 개인 경우 동작 방식
  1. 가장 왼쪽 피연산자부터 시작해 오른쪽으로 나아가며 피연산자를 평가한다.
  2. 각 피연산자는 불린형으로 변환된다. 변환 후 값이 `false`이면 평가를 멈추고 해당 피연산자의 *변환 전 원래 값*을 반환한다.
  3. 피연산자를 모두 평가한 경우 (모든 피연산자가 `true`인 경우) 마지막 피연산자를 반환한다.

```javascript
alert(1 && 2 && 3);// 3 (모두 true이므로, 마지막 값 반환)
alert(1 && 2 && null && 3);// null (첫 번째 falsy가 반환)
```


### ! (NOT)

* 동작 방식
  1. 피연산자를 불린형(true/false)로 변환한다.
  2. 변환된 값의 역을 반환한다.
* 두개 연달아 사용 (`!!`)하면 값을 불린형으로 변환할 수 있다. (Boolean을 사용한 것과 같은 결과)

```javascript
alert(!true);// false
alert(!!null);// false
alert(Boolean(null));// false
```

### 논리연산자의 우선순위
먼저 실행되는 순서 : `!` > `&&` > ``

## null 병합 연산자 `??`

* 여러 피연산자 중 값이 *확정되어있는* 변수를 반환한다.
* `a ?? b` 의 평과 결과
  * `a`가 `null`, `undefined`에 해당되지 않을 경우(값이 확정되어 있는 경우) `a`
  * 그 외의 경우 `b`

```javascript
x = a ?? b;
x = (a !== null && a !== undefined) ? a : b;// 위와 동일한 동작을 하는 코드
```


### `??`와 `||`의 차이

* `||`는 첫 번째 truthy 값을 반환한다.
* `??`는 첫 번째 *정의된(defined)* 값을 반환한다.

```javascript
let height = 0;

alert(height || 100);// 100
alert(height ?? 100);// 0
```


### `??`의 연산자 우선순위

* 대다수의 연산자보다 낮고 `?`와 `=`보다는 높다.
* 값을 하나 선택할 땐 괄호를 추가하는 게 좋다.


### 안정성 관련 이슈

`??`는 `&&`나 ``와 함께 사용하지 못한다.
